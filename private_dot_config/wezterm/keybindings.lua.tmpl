-- vim: ft=lua.chezmoitmpl
local wezterm = require("wezterm")
local act = wezterm.action
{{- if eq .chezmoi.os "darwin" }}
local meta_key = "CMD"
{{- else }}
local meta_key = "META"
{{- end }}

local keys = {
	{ key = "z", mods = meta_key, action = act.TogglePaneZoomState },
	{ key = "R", mods = "SHIFT|CTRL", action = act.ReloadConfiguration },
	{ key = "Enter", mods = meta_key, action = act.ToggleFullScreen },

  -- Launcher
	{ key = "l", mods = "SHIFT|CTRL|" .. meta_key, action = act.ShowLauncher },
  {
    key = "k",
		mods = "SHIFT|CTRL|" .. meta_key,
		action = act.PromptInputLine({
			description = wezterm.format({
				{ Attribute = { Intensity = "Bold" } },
				{ Foreground = { AnsiColor = "Fuchsia" } },
				{ Text = "Enter name for new workspace" },
			}),
			action = wezterm.action_callback(function(window, pane, line)
				-- line will be `nil` if they hit escape without entering anything
				-- An empty string if they just hit enter
				-- Or the actual line of text they wrote
				if line then
					window:perform_action(
						act.SwitchToWorkspace({
							name = line,
						}),
						pane
					)
				end
			end),
		})
  },

	-- Font Size
	{ key = "+", mods = "CTRL|SHIFT", action = act.IncreaseFontSize },
  { key = "-", mods = "CTRL", action = act.DecreaseFontSize },
	{ key = "0", mods = "CTRL", action = act.ResetFontSize },
	-- { key = "b", mods = "LEADER|CTRL", action = act.SendString("\x02") },

	-- Copy/Paste
	-- { key = "Enter", mods = "LEADER", action = act.ActivateCopyMode },
	{ key = "Enter", mods = "SHIFT|" .. meta_key, action = act.ActivateCopyMode },
	{ key = "C", mods = "SHIFT|CTRL", action = act.CopyTo("Clipboard") },
	{ key = "v", mods = meta_key, action = act.PasteFrom("Clipboard") },
	{ key = "p", mods = "LEADER", action = act.PasteFrom("PrimarySelection") },
	{
		key = "U",
		mods = "SHIFT|CTRL",
		action = act.CharSelect({ copy_on_select = true, copy_to = "ClipboardAndPrimarySelection" }),
	},

	-- Window/Tab/Pane Creation
	{ key = "N", mods = "SHIFT|CTRL", action = act.SpawnWindow },
	{ key = "t", mods = meta_key, action = act.SpawnTab("CurrentPaneDomain") },
	{ key = "D", mods = meta_key, action = act.SplitVertical({ domain = "CurrentPaneDomain" }) },
	{ key = "d", mods = meta_key, action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }) },

	-- Closing/Quitting
	{
		key = "q",
		mods = meta_key,
		action = act.DetachDomain("CurrentPaneDomain"),
	},
	{ key = "q", mods = "SHIFT|" .. meta_key, action = act.QuitApplication },
	{ key = "w", mods = meta_key, action = act.CloseCurrentPane({ confirm = false }) },
	{ key = "x", mods = meta_key, action = act.CloseCurrentTab({ confirm = false }) },

	-- Resize Pane
	{ key = "k", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Up", 5 }) },
	{ key = "j", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Down", 5 }) },
	{ key = "h", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Left", 5 }) },
	{ key = "l", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Right", 5 }) },
	{ key = "UpArrow", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Up", 5 }) },
	{ key = "DownArrow", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Down", 5 }) },
	{ key = "LeftArrow", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Left", 5 }) },
	{ key = "RightArrow", mods = "SHIFT|" .. meta_key, action = act.AdjustPaneSize({ "Right", 5 }) },

	-- Pane Navigation
	{ key = "h", mods = meta_key, action = act.ActivatePaneDirection("Left") },
	{ key = "j", mods = meta_key, action = act.ActivatePaneDirection("Down") },
	{ key = "k", mods = meta_key, action = act.ActivatePaneDirection("Up") },
	{ key = "l", mods = meta_key, action = act.ActivatePaneDirection("Right") },
	{ key = "UpArrow", mods = meta_key, action = act.ActivatePaneDirection( "Up") },
	{ key = "DownArrow", mods = meta_key, action = act.ActivatePaneDirection("Down") },
	{ key = "LeftArrow", mods = meta_key, action = act.ActivatePaneDirection("Left") },
	{ key = "RightArrow", mods = meta_key, action = act.ActivatePaneDirection("Right") },

	-- Window Navigation
	{ key = "RightArrow", mods = "CTRL|" .. meta_key, action = act.ActivateTabRelative(1) },
	{ key = "LeftArrow", mods = "CTRL|" .. meta_key, action = act.ActivateTabRelative(-1) },

  -- Workspace Switcher
	{ key = "s", mods = meta_key, action = require("smart_workspace_switcher.plugin").switch_workspace() },

	-- {
	-- 	key = "k",
	-- 	mods = "CTRL|ALT",
	-- 	action = act.Multiple({
	-- 		act.ClearScrollback("ScrollbackAndViewport"),
	-- 		act.SendKey({ key = "L", mods = "CTRL" }),
	-- 	}),
	-- },
	{ key = "r", mods = "LEADER", action = act.ActivateKeyTable({ name = "resize_pane", one_shot = false }) },
	{
		key = "s",
		mods = "SHIFT|" .. meta_key,
		action = act.PromptInputLine({
			description = wezterm.format({
				{ Attribute = { Intensity = "Bold" } },
				{ Foreground = { AnsiColor = "Fuchsia" } },
				{ Text = "Enter name for new workspace" },
			}),
			action = wezterm.action_callback(function(window, pane, line)
				-- line will be `nil` if they hit escape without entering anything
				-- An empty string if they just hit enter
				-- Or the actual line of text they wrote
				if line then
					window:perform_action(
						act.SwitchToWorkspace({
							name = line,
						}),
						pane
					)
				end
			end),
		}),
	},
	--
	-- key-tables --
	-- resizes fonts
	{
		key = "f",
		mods = "LEADER",
		action = act.ActivateKeyTable({
			name = "resize_font",
			one_shot = false,
			timemout_miliseconds = 1000,
		}),
	},
	-- resize panes
	{
		key = "p",
		mods = "LEADER",
		action = act.ActivateKeyTable({
			name = "resize_pane",
			one_shot = false,
			timemout_miliseconds = 1000,
		}),
	},
}

for i = 1, 9 do
	-- ALT + number to activate that tab
	table.insert(keys, {
		key = tostring(i),
		mods = meta_key,
		action = act.ActivateTab(i - 1),
	})
end

local key_tables = {
	resize_font = {
		{ key = "k", action = act.IncreaseFontSize },
		{ key = "j", action = act.DecreaseFontSize },
		{ key = "r", action = act.ResetFontSize },
		{ key = "Escape", action = "PopKeyTable" },
		{ key = "q", action = "PopKeyTable" },
	},
	resize_pane = {
		{ key = "k", action = act.AdjustPaneSize({ "Up", 5 }) },
		{ key = "j", action = act.AdjustPaneSize({ "Down", 5 }) },
		{ key = "h", action = act.AdjustPaneSize({ "Left", 5 }) },
		{ key = "l", action = act.AdjustPaneSize({ "Right", 5 }) },
		{ key = "Escape", action = "PopKeyTable" },
		{ key = "q", action = "PopKeyTable" },
	},
}

return {
	disable_default_key_bindings = true,
	leader = { key = "a", mods = "CTRL" },
	keys = keys,
	key_tables = key_tables,
}
